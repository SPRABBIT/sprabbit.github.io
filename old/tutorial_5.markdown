---
layout: spengine
title: 高级指令（事件响应） - SpeShow 教程
css:
 - shCore.css
 - shThemeKScript.css
js:
 - shCore.js
 - shBrushXML.js
 - shBrushKScript.js
 - highlight.js
---
               		
##高级指令（事件响应）

高级指令包括了更多的设置函数，以及延时执行脚本。这里只是先简要介绍一下，如有需要日后有时间再补充。

本节包含以下内容：

 - [预执行脚本](#part_1)
 - [内部脚本](#part_2)
 - [事件响应脚本](#part_3)
 - [跳转脚本](#part_4)

**********************************************************************

<h3 id="part_1">预执行脚本</h3>

预执行脚本并不是一种脚本的名称，而是指写在 pre.ks 中的脚本。这些脚本将会在程序开始的时候执行，但是执行的脚本不会被显示，这时程序将显示一个读取动画。读取动画可以通过修改 loading.png 图片来修改。

因为这个特性，所以建议将一些执行比较慢的脚本放到 pre.ks 中执行，而不会让游戏在执行过程中出现卡顿。比如第一次使用的@effect，还有设置了文字特效的@textBox。还有读取一些比较长的声音。

####必须预执行的函数

@first 函数是一个必须在 pre.ks 中才能起作用的函数。其作用是指定读取完后执行的脚本文件。如果没有指定，则默认执行“first.ks”文件。

@first 的参数列表如下：

{% table spengine/tutorials/arguments_first.csv %}                 

####不能预执行的函数

有一个函数不能在 pre.ks 中出现，他就是 @display。它的作用是修改游戏分辨率，因为要重置设备，卸载资源，所以该函数不能在读取资源时使用。

@display 的参数列表如下：

{% table spengine/tutorials/arguments_display.csv %}                 
     
*注意：如果设置全屏，那么分辨率必须是显卡所能支持的全屏分辨率，否则会调用失败。修改后的分辨率会保存到 config.cfg，以便在下次运行程序时生效。*

如果想预先指定分辨率，请直接修改 config.cfg 文件，而不是使用该函数。

####建议预执行的脚本

所有游戏中需要用到的特效，包括文字特效，建议在 pre.ks 中预先用 @effect 应用到一个空的屏幕中的一个空组件上，以便在预执行时读取效果资源，减少真正使用时的卡顿。

除此之外建议在 pre.ks 中执行的函数还有以下几个。

####@fps

该函数用于设置帧率的显示，默认状态下为显示在右下角，如需关闭，必须执行 @fps 函数。

@fps 的参数列表如下：

{% table spengine/tutorials/arguments_fps.csv %}                 

####@windowText

@windowText 函数用于设置窗口标题。

@windowText 的参数列表如下：

{% table spengine/tutorials/arguments_windowtext.csv %}                 

####@cursor

@cursor 函数用于设置鼠标指针。

@cursor 的参数列表如下：

{% table spengine/tutorials/arguments_cursor.csv %}                 

**********************************************************************

<h3 id="part_2">内部脚本</h3>

内部脚本是一种延迟执行脚本的方式。

####@script

我们通过 @script 函数执行内部脚本，期参数列表如下：

{% table spengine/tutorials/arguments_script.csv %}            

与 @include 不同，当程序执行到 @script 函数时，不会直接执行里面定义的脚本，而是生成一条引擎系统命令，当引擎执行到该命令时再执行其中定义的脚本。有了这个函数我们就可以让系统在需要时再进行if分支判断，从而实现游戏分支。

####@var

@var 用于定义并初始化内部脚本中的变量。如果变量已存在，则不会发生变化，否则按照 @var 的参数列表初始化变量。经过 @var 定义的变量与普通变量的不同之处在于，在使用退出游戏前，@var 定义的变量将保存下来，而一般变量不会。

@var 的参数列表用于定义变量，参数名为需要定义的变量名，参数值为要设置的变量值。


**********************************************************************

<h3 id="part_3">事件响应脚本</h3>

事件响应脚本是在某些UI事件发生的时候所触发的脚本执行。因为是有事件的时候才会执行，所以事件响应脚本也是一种内部脚本，延迟执行。设置响应脚本的方法是在设置UI组件时设置事件响应参数。

各个事件参数的解释如下：

{% table spengine/tutorials/arguments_event.csv %}

事件的响应顺序是自顶向下，即上层（layer）组件若处理了组件，则下层组件不接收事件；父组件接收到事件，子组件才能接收到事件；子组件处理了事件，相当于父组件处理了事件。只有`on_mouse`、`on_mouse_in`、`on_mouse_out`这三个事件比较特殊，即使事件被其他组件处理，这三个函数依然会响应。

以下是响应键盘按键的XXX的键名取值表：

{% table spengine/tutorials/arguments_key.csv %}

**********************************************************************

<h3 id="part_4">跳转脚本</h3>

脚本跳转也是延迟执行的一种方法。

####@goTo

当引擎执行到 @goTo 命令时，会进行脚本跳转。@goTo 的参数如下：

{% table spengine/tutorials/arguments_goto.csv %}

若不设置tag参数，脚本将跳转到file所指定的脚本的开头。

####@tag

@tag 只是用来设置标签的函数，不对引擎做任何操作。其参数如下：

{% table spengine/tutorials/arguments_tag.csv %}

同一个文件内设置的标签名必须唯一，否则只能跳转到第一次出现该名称标签的地方。

**********************************************************************

[上一节：进阶指令（UI特效）](tutorial_4.html)

[下一节：高级用途（自定义特效、变换）](tutorial_6.html)
